name: Test, Build and Publish Go

on:
  push:
    branches:
      - "master"
  pull_request:
    branches:
      - "master"

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Run Tests
        run: make test

  build:
    if: github.event_name == 'push'
    name: Build and release
    runs-on: ubuntu-latest
    needs: [test]
    steps:
      - uses: actions/checkout@v2
      - name: Setup Node.js
        uses: actions/setup-node@v1
        with:
          node-version: 12
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - uses: actions/cache@v1
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-semantic-release
          restore-keys: |
            ${{ runner.os }}-yarn-semantic-release
      - name: Install dependencies
        run: NODE_ENV=production yarn global add @semantic-release/git @semantic-release/changelog @semantic-release/exec semantic-release --no-lockfile
      - name: Release
        id: release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: $(yarn global bin)/semantic-release --ci
      - name: Set env variables
        run: |
          echo "::set-env name=user::$(echo ${{ github.repository }} | cut -d/ -f1)"; \
          echo "::set-env name=lowercase_user::$(echo ${{ github.repository }} | cut -d/ -f1 | tr '[:upper:]' '[:lower:]')"; \
          echo "::set-env name=project::$(echo ${{ github.repository }} | cut -d/ -f2 | tr '[:upper:]' '[:lower:]')"
      - name: Build the Docker image
        run: DOCKER_BUILDKIT=1 docker build --target=prod -t docker.pkg.github.com/$lowercase_user/$project/$project:latest -t docker.pkg.github.com/$lowercase_user/$project/$project:${{ steps.release.outputs.version }} --build-arg VERSION=${{ steps.release.outputs.version }} --build-arg APP=$project .
      - name: Docker login
        run: docker login docker.pkg.github.com -u $user -p ${{ secrets.GITHUB_TOKEN }}
      - name: Publish to CR
        run: |
          docker push "docker.pkg.github.com/$lowercase_user/$project/$project:latest"; \
          docker push "docker.pkg.github.com/$lowercase_user/$project/$project:${{ steps.release.outputs.version }}"
      - name: Store version
        run: echo ${{ steps.release.outputs.version }} > version
      - name: Upload version
        uses: actions/upload-artifact@v1
        with:
          name: version
          path: version

  publish:
    name: publish
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - uses: actions/checkout@v2
      - name: Download version
        uses: actions/download-artifact@v1
        with:
          name: version
      - name: Setup helm
        uses: azure/setup-helm@v1
        with:
          version: "v3.1.2"
      - name: Package helm
        run: |
          version=$(cat version/version); \
          user=$(echo ${{ github.repository }} | cut -d/ -f1); \
          lowercase_user=$(echo $user | tr '[:upper:]' '[:lower:]'); \
          project=$(echo ${{ github.repository }} | cut -d/ -f2 | tr '[:upper:]' '[:lower:]'); \
          git clone https://$user:${{ secrets.token }}@github.com/$user/helm-chart.git ../helm-chart; \
          helm lint ./charts; \
          helm package --app-version $version --version $version ./charts; \
          helm repo index --url https://$(lowercase_user).github.io/helm-chart/ --merge ../helm-chart/index.yaml .; \
          mv index.yaml $project-*.tgz ../helm-chart/; \
          cd ../helm-chart && git config user.name "GitHub Actions" && git config user.email "actions@users.noreply.github.com"; \
          git add . && git commit -m "Update $project helm chart" && git push origin master
